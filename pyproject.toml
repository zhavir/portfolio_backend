[tool.poetry]
name = "portfolio-backend"
version = "1.0.1"
description = ""
authors = ["Andrea Aramini, INI-MBM-BNC (EXT) <andrea.aramini@swisscom.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
mangum = "^0.17.0"
pytest-mypy = "^0.10.3"
pytest-env = "^1.1.3"

[tool.poetry.group.dev.dependencies]
pytest-asyncio = "^0.23.6"
pytest = "^8.1.1"
mypy = "^1.9.0"
pre-commit = "^3.7.0"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
strict = true

plugins = [
  "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
addopts = ["--mypy", "--cov=src", "--cov-report=xml:coverage.xml"]
pythonpath = [
  "src",
]
env = [
]

[tool.ruff]
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B017",  # should be considered evil
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.isort]
known-third-party = ["pydantic", "requests", "pytest", "pytest_mock"]


[tool.ruff.pycodestyle]
max-line-length = 120
